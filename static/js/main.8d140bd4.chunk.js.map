{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","_templateObject","Wrapper","section","_templateObject2","P","p","_templateObject3","Grid","div","_templateObject4","Button","button","_templateObject5","props","primary","css","_templateObject6","disabled","_templateObject7","raised","_templateObject8","flat","_templateObject9","hover","_templateObject10","focus","_templateObject11","active","_templateObject12","App","react_default","a","createElement","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"upEAGA,IAAMA,EAAQC,IAAOC,GAAVC,KAMLC,EAAUH,IAAOI,QAAVC,KAIPC,EAAIN,IAAOO,EAAVC,KAKDC,EAAOT,IAAOU,IAAVC,KAYJC,EAASZ,IAAOa,OAAVC,IAYR,SAAAC,GAAK,OAAIA,EAAMC,SAAWC,YAAjBC,MAKT,SAAAH,GAAK,OAAIA,EAAMI,UAAYF,YAAlBG,MAOT,SAAAL,GAAK,OAAIA,EAAMM,QAAUJ,YAAhBK,MAMT,SAAAP,GAAK,OAAIA,EAAMQ,MAAQN,YAAdO,MAKT,SAAAT,GAAK,OAAIA,EAAMU,OAASR,YAAfS,MAOT,SAAAX,GAAK,OAAIA,EAAMY,OAASV,YAAfW,MAMT,SAAAb,GAAK,OAAIA,EAAMc,QAAUZ,YAAhBa,OAoCEC,EA1BH,WACV,OACEC,EAAAC,EAAAC,cAAC/B,EAAD,KACE6B,EAAAC,EAAAC,cAACnC,EAAD,sBACAiC,EAAAC,EAAAC,cAAC5B,EAAD,mCAEA0B,EAAAC,EAAAC,cAACzB,EAAD,KACEuB,EAAAC,EAAAC,cAACtB,EAAD,gBACAoB,EAAAC,EAAAC,cAACtB,EAAD,CAAQI,SAAO,GAAf,kBACAgB,EAAAC,EAAAC,cAACtB,EAAD,CAAQO,UAAQ,GAAhB,mBACAa,EAAAC,EAAAC,cAACtB,EAAD,CAAQS,QAAM,GAAd,kBAGFW,EAAAC,EAAAC,cAACzB,EAAD,KACEuB,EAAAC,EAAAC,cAACtB,EAAD,CAAQW,MAAI,GAAZ,eACAS,EAAAC,EAAAC,cAACtB,EAAD,CAAQa,OAAK,GAAb,gBACAO,EAAAC,EAAAC,cAACtB,EAAD,CAAQe,OAAK,GAAb,gBACAK,EAAAC,EAAAC,cAACtB,EAAD,CAAQiB,QAAM,EAACb,SAAO,GAAtB,oBC7FYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOT,EAAAC,EAAAC,cAACQ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d140bd4.chunk.js","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst Title = styled.h1`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\nconst Wrapper = styled.section`\n  padding: 5em 5em 10em 5em;\n`;\n\nconst P = styled.p`\ncolor: lightsalmon\ntext-align: center\nfont-size: 2em`;\n\nconst Grid = styled.div`\n\npadding-top: 3em;\ndisplay: grid;\ngrid-template-columns: 12em 12em 12em 12em;\ngrid-template-rows: 12px 12px  ;\n  align-items: start;\n \n  grid-gap: 5em;\n  justify-content:space-evenly;\n  `;\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid limegreen;\n  color: limegreen;\n  margin: 0.5em 1em;\n  padding: 1em 1em;\n  font-size: 1em;\n  cursor:pointer;\n  font-weight: 300;\n  opacity: 1;\n\n  ${props => props.primary && css`\n    background: limegreen;\n    color: white;\n  `}\n  \n  ${props => props.disabled && css`\n    opacity: 0.7;\n    background: limegreen;\n    color: white;\n    cursor: not-allowed;\n  `}\n  \n  ${props => props.raised && css`\n  box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);\n  background: limegreen;\n  color: white;\n  `}\n\n  ${props => props.flat && css`\n  border: 0;\n  background: white;\n  `}\n\n  ${props => props.hover && css`\n  :hover {\n    box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.75);\n    background: limegreen;\n  color: white;}\n  `}\n\n  ${props => props.focus && css`\n  :focus {\n    box-shadow: 0 0 5px limegreen;\n    outline: 0;}\n  `}\n\n  ${props => props.active && css`\n  :active:focus {\n    font-weight: bold;}\n  `}\n`;\n\n\n\n\n\nconst App = () => {\n  return (\n    <Wrapper>\n      <Title>Button UI Kit</Title>\n      <P>Weekly Coding Challenge #6</P>\n\n      <Grid>\n        <Button>Button </Button>\n        <Button primary>Primary Button</Button>\n        <Button disabled>Disabled Button</Button>\n        <Button raised>Raised Button</Button>\n\n      </Grid>\n      <Grid>\n        <Button flat>Flat Button</Button>\n        <Button hover>Hover Button</Button>\n        <Button focus>Focus Button</Button>\n        <Button active primary>Active Button</Button>\n      </Grid>\n\n\n    </Wrapper>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}